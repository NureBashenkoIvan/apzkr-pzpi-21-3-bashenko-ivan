// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace OmNomBox.API.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240430204613_addedMeals")]
    partial class addedMeals
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Entities.Models.Machine", b =>
                {
                    b.Property<Guid>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MachineStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MachineTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MachineId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MachineStatusId");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Entities.Models.MachineSettings", b =>
                {
                    b.Property<Guid>("MachineSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MachineType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MachineSettingsId");

                    b.HasIndex("MachineId");

                    b.HasIndex("MachineType");

                    b.ToTable("MachineSettings");
                });

            modelBuilder.Entity("Entities.Models.MachineStatus", b =>
                {
                    b.Property<Guid>("MachineStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MachineStatusId");

                    b.ToTable("MachineStatuses");
                });

            modelBuilder.Entity("Entities.Models.MachineType", b =>
                {
                    b.Property<Guid>("MachineTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MachineTypeId");

                    b.ToTable("MachineTypes");
                });

            modelBuilder.Entity("Entities.Models.Manufacturer", b =>
                {
                    b.Property<Guid>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("Entities.Models.Meal", b =>
                {
                    b.Property<Guid>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PreparationTime")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("MealId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Entities.Models.Machine", b =>
                {
                    b.HasOne("Entities.Models.Company", "Company")
                        .WithMany("Machines")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Entities.Models.MachineStatus", "MachineStatus")
                        .WithMany()
                        .HasForeignKey("MachineStatusId");

                    b.HasOne("Entities.Models.MachineType", "MachineType")
                        .WithMany("Machines")
                        .HasForeignKey("MachineTypeId");

                    b.HasOne("Entities.Models.Manufacturer", "Manufacturer")
                        .WithMany("Machines")
                        .HasForeignKey("ManufacturerId");

                    b.Navigation("Company");

                    b.Navigation("MachineStatus");

                    b.Navigation("MachineType");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Entities.Models.MachineSettings", b =>
                {
                    b.HasOne("Entities.Models.Machine", "Machine")
                        .WithMany("MachineSettings")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Meal", "Meal")
                        .WithMany("MachineSettings")
                        .HasForeignKey("MachineType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("Entities.Models.Machine", b =>
                {
                    b.Navigation("MachineSettings");
                });

            modelBuilder.Entity("Entities.Models.MachineType", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("Entities.Models.Manufacturer", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("Entities.Models.Meal", b =>
                {
                    b.Navigation("MachineSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
